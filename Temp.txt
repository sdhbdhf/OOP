import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;

public class UniEatsCafeSystem {
    private JFrame frame;
    private JPanel mainPanel, loginPanel, menuPanel, itemDetailPanel, headerPanel;
    private JTextField usernameField;
    private JPasswordField passwordField;
    private Map<String, FoodItem> foodItems;
    private FoodItem currentlySelected;
    private JLabel userGreetingLabel;

    // New color scheme - Bright orange and white
    private final Color PRIMARY_COLOR = new Color(255, 165, 0); // Bright orange
    private final Color SECONDARY_COLOR = new Color(220, 220, 220); // Light gray
    private final Color ACCENT_COLOR = new Color(255, 215, 0); // Gold
    private final Color TEXT_COLOR = new Color(50, 50, 50); // Dark gray
    private final Color BACKGROUND_COLOR = Color.WHITE;

    public UniEatsCafeSystem() {
        initializeFoodItems();
        createMainFrame();
        showLoginScreen();
    }

    private void initializeFoodItems() {
        foodItems = new HashMap<>();
        foodItems.put("burger", new FoodItem("Classic Burger", "Juicy beef patty with lettuce, tomato, and our special sauce served with fries", 12.99, "burger.png"));
        foodItems.put("pizza", new FoodItem("Margherita Pizza", "Traditional pizza with San Marzano tomato sauce, fresh mozzarella, and basil", 14.99, "pizza.png"));
        foodItems.put("salad", new FoodItem("Caesar Salad", "Crisp romaine lettuce with homemade Caesar dressing, parmesan, and garlic croutons", 9.99, "salad.png"));
        foodItems.put("pasta", new FoodItem("Spaghetti Carbonara", "Al dente spaghetti with creamy egg sauce, pancetta, and pecorino cheese", 13.99, "pasta.png"));
        foodItems.put("dessert", new FoodItem("Chocolate Lava Cake", "Warm chocolate cake with a molten center, served with vanilla ice cream", 7.99, "dessert.png"));
    }



    private void createMainFrame() {
        frame = new JFrame("UniEats CafÃ©");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(1200, 800);
        frame.setMinimumSize(new Dimension(1000, 700));

        // Center the window
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        frame.setLocation((screenSize.width - frame.getWidth()) / 2,
                (screenSize.height - frame.getHeight()) / 2);
    }

    private void showLoginScreen() {
        loginPanel = new JPanel(new BorderLayout());
        loginPanel.setBackground(BACKGROUND_COLOR);

        // Logo panel
        JPanel logoPanel = new JPanel();
        logoPanel.setBackground(BACKGROUND_COLOR);
        logoPanel.setBorder(new EmptyBorder(50, 0, 50, 0));

        JLabel logoLabel = new JLabel("UNI EATS");
        logoLabel.setFont(new Font("Segoe UI", Font.BOLD, 48));
        logoLabel.setForeground(PRIMARY_COLOR);
        logoPanel.add(logoLabel);

        // Login form panel
        JPanel formPanel = new JPanel(new GridBagLayout());
        formPanel.setBackground(BACKGROUND_COLOR);
        formPanel.setBorder(new EmptyBorder(20, 300, 50, 300));

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10);
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1.0;

        JLabel loginTitle = new JLabel("Welcome Back!", SwingConstants.CENTER);
        loginTitle.setFont(new Font("Segoe UI", Font.BOLD, 24));
        loginTitle.setForeground(TEXT_COLOR);
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        formPanel.add(loginTitle, gbc);

        JLabel usernameLabel = new JLabel("Username:");
        usernameLabel.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 1;
        formPanel.add(usernameLabel, gbc);

        usernameField = new JTextField();
        usernameField.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        usernameField.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(SECONDARY_COLOR),
                BorderFactory.createEmptyBorder(8, 8, 8, 8)
        ));
        gbc.gridx = 1;
        formPanel.add(usernameField, gbc);

        JLabel passwordLabel = new JLabel("Password:");
        passwordLabel.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        gbc.gridx = 0;
        gbc.gridy = 2;
        formPanel.add(passwordLabel, gbc);

        passwordField = new JPasswordField();
        passwordField.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        passwordField.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(SECONDARY_COLOR),
                BorderFactory.createEmptyBorder(8, 8, 8, 8)
        ));
        gbc.gridx = 1;
        formPanel.add(passwordField, gbc);

        JButton loginButton = new JButton("Sign In");
        styleButton(loginButton, PRIMARY_COLOR, Color.WHITE);
        loginButton.setFont(new Font("Segoe UI", Font.BOLD, 14));
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.NONE;
        gbc.anchor = GridBagConstraints.CENTER;
        formPanel.add(loginButton, gbc);

        JLabel signupPrompt = new JLabel("Don't have an account? Sign up", SwingConstants.CENTER);
        signupPrompt.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        signupPrompt.setForeground(PRIMARY_COLOR);
        gbc.gridy = 4;
        formPanel.add(signupPrompt, gbc);

        loginButton.addActionListener(e -> {
            String username = usernameField.getText();
            String password = new String(passwordField.getPassword());

            if (!username.isEmpty() && !password.isEmpty()) {
                showMainMenu(username);
            } else {
                JOptionPane.showMessageDialog(frame,
                        "Please enter both username and password",
                        "Login Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        });

        loginPanel.add(logoPanel, BorderLayout.NORTH);
        loginPanel.add(formPanel, BorderLayout.CENTER);

        frame.setContentPane(loginPanel);
        frame.setVisible(true);
    }

    private void showMainMenu(String username) {
        mainPanel = new JPanel(new BorderLayout());
        mainPanel.setBackground(BACKGROUND_COLOR);

        createHeader(username);
        createMenuContent();
        createItemDetailPanel();

        frame.setContentPane(mainPanel);
        frame.revalidate();
        frame.repaint();
    }

    private void createHeader(String username) {
        headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(PRIMARY_COLOR);
        headerPanel.setBorder(new EmptyBorder(15, 30, 15, 30));

        // Logo
        JLabel logoLabel = new JLabel("UNI EATS");
        logoLabel.setFont(new Font("Segoe UI", Font.BOLD, 24));
        logoLabel.setForeground(Color.WHITE);

        // User greeting
        userGreetingLabel = new JLabel("Welcome, " + username);
        userGreetingLabel.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        userGreetingLabel.setForeground(Color.WHITE);

        // Navigation buttons
        JPanel navPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 0));
        navPanel.setOpaque(false);

        JButton menuButton = new JButton("Menu");
        styleButton(menuButton, Color.WHITE, PRIMARY_COLOR);

        JButton ordersButton = new JButton("My Orders");
        styleButton(ordersButton, Color.WHITE, PRIMARY_COLOR);

        JButton logoutButton = new JButton("Logout");
        styleButton(logoutButton, Color.WHITE, PRIMARY_COLOR);

        logoutButton.addActionListener(e -> {
            usernameField.setText("");
            passwordField.setText("");
            showLoginScreen();
        });

        navPanel.add(menuButton);
        navPanel.add(ordersButton);
        navPanel.add(logoutButton);

        headerPanel.add(logoLabel, BorderLayout.WEST);
        headerPanel.add(userGreetingLabel, BorderLayout.CENTER);
        headerPanel.add(navPanel, BorderLayout.EAST);

        mainPanel.add(headerPanel, BorderLayout.NORTH);
    }

    private void createMenuContent() {
        JPanel contentPanel = new JPanel(new BorderLayout());
        contentPanel.setBackground(BACKGROUND_COLOR);

        // Menu title
        JLabel menuTitle = new JLabel("Our Menu", SwingConstants.CENTER);
        menuTitle.setFont(new Font("Segoe UI", Font.BOLD, 28));
        menuTitle.setForeground(TEXT_COLOR);
        menuTitle.setBorder(new EmptyBorder(30, 0, 20, 0));
        contentPanel.add(menuTitle, BorderLayout.NORTH);

        // Food items grid
        JPanel itemsGrid = new JPanel(new GridLayout(2, 5, 10, 10));
        itemsGrid.setBackground(BACKGROUND_COLOR);
        itemsGrid.setBorder(new EmptyBorder(0, 30, 30, 30));

        for (String key : foodItems.keySet()) {
            FoodItem item = foodItems.get(key);
            JPanel itemCard = createItemCard(item);
            itemsGrid.add(itemCard);
        }

        // Wrap grid in scroll pane
        JScrollPane scrollPane = new JScrollPane(itemsGrid);
        scrollPane.setBorder(null);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);

        contentPanel.add(scrollPane, BorderLayout.CENTER);
        mainPanel.add(contentPanel, BorderLayout.CENTER);
    }
    private JPanel createItemCard(FoodItem item) {
        JPanel card = new JPanel(new BorderLayout());
        card.setBackground(Color.BLACK);
        card.setPreferredSize(new Dimension(175,175));
        card.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(SECONDARY_COLOR),
                BorderFactory.createEmptyBorder(10, 10, 10, 10)
        ));
        card.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        // Image label with placeholder URL
        JLabel imageLabel = new JLabel();
        imageLabel.setHorizontalAlignment(SwingConstants.CENTER);
        imageLabel.setPreferredSize(new Dimension(175, 125));

        try {
            // Get resource path based on item name
            String imagePath = "";
            switch(item.name) {
                case "Classic Burger":
                    imagePath = "/Burger.jpg";
                    break;
                case "Margherita Pizza":
                    imagePath = "/Pizza.jpg";
                    break;
                case "Caesar Salad":
                    imagePath = "/Salad.jpg";
                    break;
                case "Spaghetti Carbonara":
                    imagePath = "/Spaghetti.jpg";
                    break;
                case "Chocolate Lava Cake":
                    imagePath = "/ChocolateLavaCake.jpg";
                    break;
                default:
                    imagePath = "/default.jpg";
            }

            // Load image properly
            InputStream imgStream = getClass().getResourceAsStream(imagePath);
            if (imgStream != null) {
                // ImageIcon originalIcon = new ImageIcon(ImageIO.read(imgStream));
                // Image scaledImage = originalIcon.getImage().getScaledInstance(
                //     180, 150, Image.SCALE_SMOOTH);
                // imageLabel.setIcon(new ImageIcon(scaledImage));

                ImageIcon originalIcon = new ImageIcon(ImageIO.read(imgStream));
                int cardWidth = 175;
                int cardHeight = 125; // 175 - ~50 space for text

                Image scaledImage = originalIcon.getImage().getScaledInstance(
                        cardWidth,
                        cardHeight,
                        Image.SCALE_SMOOTH
                );
                imageLabel.setIcon(new ImageIcon(scaledImage));
                imageLabel.setPreferredSize(new Dimension(cardWidth, cardHeight));
                imageLabel.setOpaque(true); // ensures black background if image doesn't cover
                imageLabel.setBackground(Color.BLACK);

            } else {
                throw new IOException("Image not found: " + imagePath);
            }
        } catch (Exception e) {
            // Fallback if image fails to load
            imageLabel.setOpaque(true);
            imageLabel.setBackground(SECONDARY_COLOR);
            imageLabel.setText(item.name);
            imageLabel.setForeground(TEXT_COLOR);
            imageLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
            System.err.println("Failed to load image: " + e.getMessage());
        }

        // Item info
        JPanel infoPanel = new JPanel();
        infoPanel.setLayout(new BoxLayout(infoPanel, BoxLayout.Y_AXIS));
        infoPanel.setBackground(Color.WHITE);
        infoPanel.setBorder(new EmptyBorder(10, 0, 0, 0));

        JLabel nameLabel = new JLabel(item.name);
        nameLabel.setFont(new Font("Segoe UI", Font.BOLD, 14));
        nameLabel.setForeground(TEXT_COLOR);

        JLabel priceLabel = new JLabel(String.format("$%.2f", item.price));
        priceLabel.setFont(new Font("Segoe UI", Font.BOLD, 14));
        priceLabel.setForeground(PRIMARY_COLOR);
        priceLabel.setBorder(new EmptyBorder(5, 0, 0, 0));

        infoPanel.add(nameLabel);
        infoPanel.add(priceLabel);

        card.add(imageLabel, BorderLayout.CENTER);
        card.add(infoPanel, BorderLayout.SOUTH);

        // Add click listener
        card.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                showItemDetails(item);
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                card.setBorder(BorderFactory.createCompoundBorder(
                        BorderFactory.createLineBorder(PRIMARY_COLOR),
                        BorderFactory.createEmptyBorder(10, 10, 10, 10)
                ));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                card.setBorder(BorderFactory.createCompoundBorder(
                        BorderFactory.createLineBorder(SECONDARY_COLOR),
                        BorderFactory.createEmptyBorder(10, 10, 10, 10)
                ));
            }
        });

        return card;
    }

    private void createItemDetailPanel() {
        itemDetailPanel = new JPanel();
        itemDetailPanel.setPreferredSize(new Dimension(350, 0));
        itemDetailPanel.setBorder(new EmptyBorder(30, 20, 30, 30));
        itemDetailPanel.setBackground(new Color(245, 245, 245));

        mainPanel.add(itemDetailPanel, BorderLayout.EAST);
    }
//private void createItemDetailPanel() {
//    itemDetailPanel = new JPanel(new BorderLayout(10, 20));
//    itemDetailPanel.setPreferredSize(new Dimension(350, 0));
//    itemDetailPanel.setBorder(new EmptyBorder(30, 20, 30, 30));
//    itemDetailPanel.setBackground(new Color(245, 245, 245));
//
//    JLabel addTitle = new JLabel("Add New Menu Item", SwingConstants.CENTER);
//    addTitle.setFont(new Font("Segoe UI", Font.BOLD, 18));
//    addTitle.setForeground(TEXT_COLOR);
//
//    // Input fields
//    JPanel inputPanel = new JPanel();
//    inputPanel.setLayout(new BoxLayout(inputPanel, BoxLayout.Y_AXIS));
//    inputPanel.setBackground(new Color(245, 245, 245));
//
//    JTextField nameField = new JTextField();
//    nameField.setFont(new Font("Segoe UI", Font.PLAIN, 14));
//    nameField.setBorder(BorderFactory.createTitledBorder("Item Title"));
//
//    JTextArea descriptionField = new JTextArea(4, 20);
//    descriptionField.setFont(new Font("Segoe UI", Font.PLAIN, 14));
//    descriptionField.setLineWrap(true);
//    descriptionField.setWrapStyleWord(true);
//    descriptionField.setBorder(BorderFactory.createTitledBorder("Item Description"));
//
//    JButton addButton = new JButton("Add to Menu");
//    styleButton(addButton, PRIMARY_COLOR, Color.WHITE);
//    addButton.setFont(new Font("Segoe UI", Font.BOLD, 14));
//
//    // Action listener for adding item
//    addButton.addActionListener(e -> {
//        String name = nameField.getText().trim();
//        String description = descriptionField.getText().trim();
//
//        if (!name.isEmpty() && !description.isEmpty()) {
//            // Generate a simple key
//            String key = name.toLowerCase().replaceAll("\\s+", "_");
//
//            foodItems.put(key, new FoodItem(name, description, 10.00, "default.jpg")); // default image & price
//            JOptionPane.showMessageDialog(frame, "New item added to menu!", "Success", JOptionPane.INFORMATION_MESSAGE);
//
//            showMainMenu(userGreetingLabel.getText().replace("Welcome, ", ""));
//        } else {
//            JOptionPane.showMessageDialog(frame, "Please enter both name and description.", "Input Error", JOptionPane.WARNING_MESSAGE);
//        }
//    });
//
//    inputPanel.add(nameField);
//    inputPanel.add(Box.createVerticalStrut(10));
//    inputPanel.add(descriptionField);
//    inputPanel.add(Box.createVerticalStrut(20));
//    inputPanel.add(addButton);
//
//    itemDetailPanel.add(addTitle, BorderLayout.NORTH);
//    itemDetailPanel.add(inputPanel, BorderLayout.CENTER);
//    mainPanel.add(itemDetailPanel, BorderLayout.EAST);
//}


    private void showItemDetails(FoodItem item) {
        currentlySelected = item;
        itemDetailPanel.removeAll();
        itemDetailPanel.setLayout(new BorderLayout(0, 20));

        // Item name
        JTextField nameLabel = new JTextField(item.name, SwingConstants.CENTER);
        nameLabel.setFont(new Font("Segoe UI", Font.BOLD, 20));
        nameLabel.setForeground(TEXT_COLOR);

        // Image placeholder
        JLabel imageLabel = new JLabel("Image of " + item.name, SwingConstants.CENTER);
        imageLabel.setPreferredSize(new Dimension(300, 200));
        imageLabel.setOpaque(true);
        imageLabel.setBackground(SECONDARY_COLOR);
        imageLabel.setForeground(TEXT_COLOR);
        imageLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        imageLabel.setBorder(BorderFactory.createLineBorder(SECONDARY_COLOR, 1));

        // Description
        JTextArea descArea = new JTextArea(item.description);
        descArea.setLineWrap(true);
        descArea.setWrapStyleWord(true);
        descArea.setEditable(true);
        descArea.setBackground(new Color(245, 245, 245));
        descArea.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        descArea.setForeground(TEXT_COLOR);

        // Price and quantity controls
        JPanel controlPanel = new JPanel(new BorderLayout(10, 10));
        controlPanel.setBackground(new Color(245, 245, 245));

        JPanel pricePanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        pricePanel.setBackground(new Color(245, 245, 245));

        JLabel priceLabel = new JLabel(String.format("$%.2f", item.price));
        priceLabel.setFont(new Font("Segoe UI", Font.BOLD, 24));
        priceLabel.setForeground(PRIMARY_COLOR);
        pricePanel.add(priceLabel);

        JPanel quantityPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 0));
        quantityPanel.setBackground(new Color(245, 245, 245));

        JLabel quantityLabel = new JLabel("Quantity:");
        quantityLabel.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        quantityPanel.add(quantityLabel);

        JSpinner quantitySpinner = new JSpinner(new SpinnerNumberModel(1, 1, 10, 1));
        quantitySpinner.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        quantitySpinner.setPreferredSize(new Dimension(60, 30));
        quantityPanel.add(quantitySpinner);

        JButton addButton = new JButton("Add to Order");
        styleButton(addButton, PRIMARY_COLOR, Color.WHITE);
        addButton.setFont(new Font("Segoe UI", Font.BOLD, 14));
        addButton.addActionListener(e -> {
            int quantity = (Integer) quantitySpinner.getValue();
            double total = quantity * item.price;

            JOptionPane.showMessageDialog(frame,
                    String.format("<html><div style='width:200px;'><center>Added %d x %s<br>Total: <b>$%.2f</b></center></div></html>",
                            quantity, item.name, total),
                    "Item Added",
                    JOptionPane.INFORMATION_MESSAGE);
        });

        controlPanel.add(pricePanel, BorderLayout.NORTH);
        controlPanel.add(quantityPanel, BorderLayout.CENTER);
        controlPanel.add(addButton, BorderLayout.SOUTH);

        // Add components to detail panel
        itemDetailPanel.add(nameLabel, BorderLayout.NORTH);
        itemDetailPanel.add(imageLabel, BorderLayout.CENTER);
        itemDetailPanel.add(new JScrollPane(descArea), BorderLayout.CENTER);
        itemDetailPanel.add(controlPanel, BorderLayout.SOUTH);

        itemDetailPanel.revalidate();
        itemDetailPanel.repaint();
    }

    private void styleButton(JButton button, Color bgColor, Color textColor) {
        button.setBackground(bgColor);
        button.setForeground(textColor);
        button.setFocusPainted(false);
        button.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(bgColor.darker()),
                BorderFactory.createEmptyBorder(8, 15, 8, 15)
        ));

        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                button.setBackground(bgColor.brighter());
            }

            @Override
            public void mouseExited(MouseEvent e) {
                button.setBackground(bgColor);
            }
        });
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new UniEatsCafeSystem());
    }

    private class FoodItem {
        String name;
        String description;
        double price;
        String imagePath;

        public FoodItem(String name, String description, double price, String imagePath) {
            this.name = name;
            this.description = description;
            this.price = price;
            this.imagePath = imagePath;
        }
    }
}